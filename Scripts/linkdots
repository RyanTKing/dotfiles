#!/usr/bin/env python
from __future__ import print_function
import os
import re
import shutil

def info(text):
    print('[ \033[00;34m..\033[0m ] ' + text)

def warning(text):
    print('[ \033[00;33m??\033[0m ] ' + text)

def success(text):
    print('[ \033[00;32mOK\033[0m ] ' + text)

def failure(text):
    print('[\033[00;31mFAIL\033[0m] ' + text)

def get_dots_dir(home_dir):
    dots_dir = home_dir + '/Projects/dotfiles'

    while not os.path.isdir(dots_dir):
        print('Could not find dotfiles at \"%s\".' % dots_dir)
        dots_dir = input('Please specify a different location: ')
        if dots_dir[0] == '~':
            dots_dir = home_dir + dots_dir[1:]

    return dots_dir

def setup_gitconfig(home_dir, dots_dir, platform):
    info('Setting up gitconfig')
    git_dir = dots_dir + '/git'
    name = input('Github author name: ')
    email = input('Github email address: ')
    helper = 'cached'
    if platform == 'Darwin':
        helper = 'osxkeychain'
    elif platform == 'Linux':
        if os.path.exists('/usr/share/git/credential/gnome-keyring/' + \
                              'git-credential-gnome-keyring'):
            helper = '/usr/share/git/credential/gnome-keyring/' + \
                     'git-credential-gnome-keyring'
        else:
            warning('Gnome Keyring for Git not configured, ' + \
                    'falling back to cached helper.')

    with open(home_dir + '/.gitconfig.local', 'w') as f:
        f.write('[user]\n')
        f.write('    name = %s\n' % name)
        f.write('    email = %s\n' % email)
        f.write('[credential]\n')
        f.write('    helper = %s' % helper)

    success('Done')

def link_file(src, dst):
    if os.path.exists(dst):
        warning('File already exists: "%s", what would you like to do?'
                % os.path.basename(dst))
        choice = ''

        while True:
            print('[s]kip')
            print('[o]overwrite')
            print('[b]ackup')

            choice = input('Choice: ')
            if choice == 's':
                success('Skipped: "%s"' % src)
                return
            elif choice == 'o':
                os.remove(dst)
                success('Removed: "%s"' % dst)
                break
            elif choice == 'b':
                shutil.move(dst, dst + '.backup')
                success('Moved "%s" to "%s.backup"' % (dst, dst))
                break
            else:
                failure('Invalid Choice')

    os.symlink(src, dst)
    success('Created symlink from "%s" to "%s"' % (src, dst))

def link_all(home_dir, dots_dir, platform):
    darwin = re.compile('darwin.')
    linux = re.compile('linux.')
    info('Installing Dotfiles')
    git = re.compile("/.git")
    symlink = re.compile(".symlink")

    for item in os.walk(dots_dir):
        (path, dirs, files) = item
        if path != dots_dir and not git.search(path):
            for file in files:
                res = symlink.search(file)
                darwin_res = darwin.search(file)
                linux_res = linux.search(file)
                if res and file[0:2] != '.#' and \
                   not ((darwin_res and platform == 'Linux') or
                        (linux_res and platform == 'Darwin')):
                    start = 0
                    end = res.span()[0]
                    if darwin_res:
                        start = darwin_res.span()[1] + 1
                    if linux_res:
                        start = linux_res.span()[1] + 1
                    src = path + '/' + file
                    dst = home_dir + '/.' + file[start:end]
                    link_file(src, dst)

platform = os.uname()[0]
home_dir = os.environ['HOME']
dots_dir = get_dots_dir(home_dir)

# setup_gitconfig(home_dir, dots_dir, platform)
link_all(home_dir, dots_dir, platform)
success('All dotfiles linked')
