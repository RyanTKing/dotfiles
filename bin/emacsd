#!/usr/bin/env bash
# Control the emacs daemon

# Socket Directory
SDIR="${EMACSD_SOCKET}"

# Chosen command
CMD=""

# Whether cerbose output is enabled
VERBOSE=false

# Alias stdout and stderr
exec 3>&1
exec 4>&2

# Analyze the arguments
for ARG in $@; do
    if [[ "${ARG}" == "--verbose" || "${ARG}" == "-v" ]]; then
        VERBOSE=true
    elif [[ -z "${CMD}" ]]; then
        CMD="${ARG}"
    else
        status_msg "error" "emacsd" "unknown option: \"${ARG}\""
        exit 1
    fi
done


# CMD defaults to "start"
[[ -z "${CMD}" ]] && CMD="start"

# Get the PID of any current process
PID=`fuser ${SDIR}/server 2>/dev/null`

# Redirect stdout and stderr if verbose is on
if ! ${VERBOSE}; then
    exec 1>/dev/null
    exec 2>/dev/null
fi

# Execute Chosen Command
case "${CMD}" in
    "start")
        if [[ -z "${PID}" ]]; then
            emacs --eval "(setq server-socket-dir \"${SDIR}\")" --daemon
            STATUS=${?}
            MSG_SUCC="emacs daemon started."
            MSG_FAIL="emacs daemon failed to start."
        else
            STATUS=1
            MSG_FAIL="an emacs daemon is already running."
        fi
        ;;
    "stop")
        if [[ -n "${PID}" ]]; then
            emacsclient --eval "(save-buffers-kill-emacs)" -s "${SDIR}/server"
            STATUS=${?}
            MSG_SUCC="emacs daemon stopped."
            MSG_FAIL="emacs daemon failed to stop"
        else
            STATUS=1
            MSG_FAIL="no emacs daemon found."
        fi
        ;;
    "kill")
        if [[ -n "${PID}" ]]; then
            kill ${PID}
            STATUS=${?}
            MSG_SUCC="emacs daemon and all clients killed."
            MSG_FAIL="could not kill emacs daemon and clients."
            rm -f $SDIR/*
            [[ ${?} == 1 ]] && STATUS=1
        else
            STATUS=1
            MSG_FAIL="no emacs daemon found."
        fi
        ;;
    *)
        STATUS=1
        MSG_FAIL="unrecognized command: ${CMD}"
        ;;
esac

! ${VERBOSE} && exec 1>&3; 2>&4;

if [[ ${STATUS} == 1 ]]; then
    status_msg "error" "emacsd" "${MSG_FAIL}"
else
    status_msg "success" "emacsd" "${MSG_SUCC}"
fi

exit ${STATUS}
